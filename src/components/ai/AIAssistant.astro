import { aiCmsConfig } from '../../config/ai-cms.config';
import { aiContentSchema } from '../../config/ai-cms.config';

interface Props {
  initialMessage?: string;
  context?: {
    pageType: string;
    currentContent?: string;
    targetKeywords?: string[];
  };
}

const { initialMessage = '', context = {} } = Astro.props;

// State for chat messages
const messages = [
  {
    role: 'system',
    content: aiCmsConfig.contentGeneration.systemPrompt,
  },
  {
    role: 'user',
    content: initialMessage,
  },
];

<div class="ai-assistant">
  <div class="chat-container">
    <div class="messages">
      {messages.map((message, index) => (
        <div class={`message ${message.role}`}>
          <div class="content">{message.content}</div>
        </div>
      ))}
    </div>
    
    <form class="input-form" id="chat-form">
      <textarea
        name="message"
        placeholder="Ask me anything about your content or SEO..."
        class="message-input"
        rows="3"
      ></textarea>
      <button type="submit" class="send-button">
        Send
      </button>
    </form>
  </div>
  
  <div class="ai-suggestions">
    <h3>AI Suggestions</h3>
    <div class="suggestions-list">
      <!-- Suggestions will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .ai-assistant {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
    padding: 2rem;
    background: #1a1a1a;
    border-radius: 1rem;
    color: white;
  }
  
  .chat-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .messages {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-height: 60vh;
    overflow-y: auto;
    padding: 1rem;
    background: #2a2a2a;
    border-radius: 0.5rem;
  }
  
  .message {
    padding: 1rem;
    border-radius: 0.5rem;
    max-width: 80%;
  }
  
  .message.user {
    background: #3b82f6;
    margin-left: auto;
  }
  
  .message.system {
    background: #4b5563;
    margin-right: auto;
  }
  
  .input-form {
    display: flex;
    gap: 1rem;
  }
  
  .message-input {
    flex: 1;
    padding: 1rem;
    border-radius: 0.5rem;
    background: #2a2a2a;
    color: white;
    border: 1px solid #4b5563;
    resize: none;
  }
  
  .send-button {
    padding: 1rem 2rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  
  .send-button:hover {
    background: #2563eb;
  }
  
  .ai-suggestions {
    background: #2a2a2a;
    padding: 1rem;
    border-radius: 0.5rem;
  }
  
  .suggestions-list {
    margin-top: 1rem;
  }
</style>

<script>
  const form = document.getElementById('chat-form');
  const messageInput = form.querySelector('textarea');
  const messagesContainer = document.querySelector('.messages');
  const suggestionsContainer = document.querySelector('.suggestions-list');
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const message = messageInput.value.trim();
    if (!message) return;
    
    // Add user message to chat
    addMessage('user', message);
    messageInput.value = '';
    
    try {
      // Call AI API
      const response = await fetch('/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message,
          context: ${JSON.stringify(context)},
        }),
      });
      
      const data = await response.json();
      
      // Add AI response to chat
      addMessage('system', data.response);
      
      // Update suggestions
      updateSuggestions(data.suggestions);
    } catch (error) {
      console.error('Error:', error);
      addMessage('system', 'Sorry, I encountered an error. Please try again.');
    }
  });
  
  function addMessage(role, content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}`;
    messageDiv.innerHTML = `<div class="content">${content}</div>`;
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
  
  function updateSuggestions(suggestions) {
    suggestionsContainer.innerHTML = suggestions
      .map(suggestion => `<div class="suggestion">${suggestion}</div>`)
      .join('');
  }
</script> 